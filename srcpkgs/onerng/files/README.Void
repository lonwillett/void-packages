=== Notes and caveats ===

This file is valid as of 2017-09-10.

This assumes that you want to use "rngd" (from the "rng-tools"
package) to feed the entropy from a OneRNG device to the kernel.

If you want to do something else, then this can probably be managed by
tweaking some parameters in "/etc/sv/onerng/run", but that is not
something that is explicitly supported.


=== Basic configuration ===

To use a OneRNG device, it is necessary to configure rngd to work with
it. This involves the following steps:

 -- Make sure that the value of RNGD_OPTS set in /etc/sv/rngd/conf
    contains "-r /run/hwrng". e.g. /etc/sv/rngd/conf could be:

	RNGD_OPTS="-r /run/hwrng"

    You may want to include some more options to force rngd to exclude
    other sources of entropy. In particular, there are a lot of dodgy
    TPM implementations, so the TPM RNG may be unusable.

    If the OneRNG device is the only source of entropy that rngd is
    configured to use, then you should probably also create the "down"
    file for its service. e.g. run (as root):

	touch /etc/sv/rngd/down

    This isn't strictly necessary, but it stops runit from uselessly
    trying to start up rngd when it has no entropy source; the
    "onerng" service will start the "rngd" service when the OneRNG
    device is ready.


 -- The "rngd" service needs to be enabled:

	ln -s /etc/sv/rngd /var/service/

 -- The "onerng" service needs to be enabled:

	ln -s /etc/sv/onerng /var/service/

Finally, you may need to unplug and plug-in your OneRNG device (or
take some equivalent action), if it was already plugged in when the
"onerng" package was installed. This is needed to force udev to
execute the rule installed by the onerng package.


=== Details ===

This section gives a quick overview of how the different components
fit together.

A couple of udev rules are registered (79-onerng.rules), so that when
a OneRNG device is plugged in, a symlink is created (/dev/onerng), and
the "onerng" service is started ("sv up onerng"). When the device is
unplugged, the "onerng" service is stopped ("sv down onerng").  Note
that the "onerng" service is not automatically started by runit
because it has a "down" file.

When the "onerng" service starts up, it does some device
initialisation and what-not, creates the symbolic link "/run/hwrng"
pointing to the device, and then stops and restarts (or just starts)
the "rngd" service, which must be configured to use "/run/hwrng" as a
source of entropy.

When the "onerng" service stops, it removes "/run/hwrng", and then
stops and maybe restarts the "rngd" service.

For further details, see the scripts.
