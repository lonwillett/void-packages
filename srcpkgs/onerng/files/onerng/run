#!/bin/sh

# User settable parameters
ONERNG_MODE_COMMAND="cmd0"
ONERNG_VERIFY_FIRMWARE="0"
ONERNG_URANDOM_RESEED="10"
RNGD_OPTS="-x 1 -x 2 -e 7"
[ -r conf ] && . ./conf

# Fixed parameters
UDEVLINK="/dev/onerng"		# Link created by udev
RUNLINK="/run/hwrng"		# Link created by us
RNGD_SVC="rngd"			# Name of rngd service
RNGD_EXE="rngd"			# Path to rngd program

# wait for udev to finish
sleep 1

if [ ! -L "$UDEVLINK" -o ! -c "$UDEVLINK" ]; then
    echo "onerng: Symbolic link to device missing or incorrect: $UDEVLINK" >&2
    exit 1
fi

# Initialise the device (init.sh script)
# NB: Want to use canonical name in ONERNGDEV, for UUCP lock file creation.
ONERNGDEV="/dev/$(readlink "$UDEVLINK")"
if [ ! -c "$ONERNGDEV" ]; then
    echo "onerng: Bad device: ${ONERNGDEV}" >&2
    exit 1
fi
. /usr/share/onerng/init.sh

# NB: stdin is now open to the device, and holding a lock on it.

# Create a symbolic link; it's probably a safer way for rngd or other
# clients to access the device, and we need to save the value of
# ONERNGDEV for the finish script to use.
ln -f -s "$ONERNGDEV" "$RUNLINK"

#
# if the urandom_min_reseed_secs parameter exists then allow
# us to override it - it's there to stop /dev/urandom from sucking
# up all the system entropy, but with onerng we have lots. So lowering
# this from the default 60s is fine; even 0 is a reasonable choice.
#
if [ -n "$ONERNG_URANDOM_RESEED" -a \
	-e /proc/sys/kernel/random/urandom_min_reseed_secs ]
then
    echo "$ONERNG_URANDOM_RESEED" >/proc/sys/kernel/random/urandom_min_reseed_secs
fi

# Stop the rngd service, if it is enabled and running,
# and start our own "rngd" process.
if [ -n "$RNGD_SVC" -a -d "/var/service/$RNGD_SVC" ]; then
    sv force-shutdown "$RNGD_SVC"
fi
exec chpst -b onerng "$RNGD_EXE" $RNGD_OPTS -r "$RUNLINK" -f
