# Template file for 'rust'
pkgname=rust
version=1.24.1
revision=3
_rust_dist_version=1.24.0
_cargo_dist_version=0.25.0
# NB. if you push any(!) new version, don't forget to put a build
# output of musl to https://repo.voidlinux.eu/distfiles/
wrksrc="rustc-${version}-src"
lib32disabled=yes
patch_args="-Np1"
build_style=configure
make_build_args="dist VERBOSE=1"
only_for_archs="i686 x86_64 x86_64-musl"
hostmakedepends="cmake curl pkg-config python"
makedepends="libffi-devel llvm4.0 ncurses-devel zlib-devel"
short_desc="Safe, concurrent, practical systems language"
maintainer="Enno Boland <gottox@voidlinux.eu>"
homepage="http://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-${version}-src.tar.gz"
checksum=3ea53d45e8d2e9a41afb3340cf54b9745f845b552d802d607707cf04450761ef

case "$XBPS_MACHINE" in
x86_64-musl)
	hostmakedepends+=" libcurl libgit2 httperf"  # shoot me twice
	distfiles+="
	 https://repo.voidlinux.eu/distfiles/rustc-${_rust_dist_version}-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/rust-std-${_rust_dist_version}-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/cargo-${_cargo_dist_version}-x86_64-unknown-linux-musl.tar.gz"
	checksum+="
	 4fc686260792b71ffef2cdb9fc59e24d9132e709043bc5cd53b812b5df013ed0
	 5193945a852b53cabad243a6fb78da175843f9c3df740c04ef545bcf392304b5
	 b909608608b36cd75f63f7aab1efb31f3eb50a1f0744151474ebc9559f721bdd"
	;;
x86_64)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/rustc-${_rust_dist_version}-x86_64-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/rust-std-${_rust_dist_version}-x86_64-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/cargo-${_cargo_dist_version}-x86_64-unknown-linux-gnu.tar.xz"
	checksum+="
	 229fecc14e725d5dc2ce264925b362232649813cc436c51fab8ea376831f8d77
	 11f2a4fb8a7474e22dce61893b721dc54d9090bc7c784d17366a9a27541765ad
	 9cad9675f7e48d7792b931d662031c6b9f6b834b048108be3615eac38ef5303a"
	;;
i686)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/rustc-${_rust_dist_version}-i686-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/rust-std-${_rust_dist_version}-i686-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/cargo-${_cargo_dist_version}-i686-unknown-linux-gnu.tar.xz"
	checksum+="
	 6b7b6b3608648a8106fee51463c4fc73399dcf8a0657431e66734a7f6a0d4305
	 65197a0d01c5650f00fd5edfc427b7b5b33e2c8ea96ffb40924b819012646033
	 7f06f92a3013d2f54be69ccaa148979bf5d6e95b57d3c48981b28b0b3feb78d3"
	;;
esac

post_extract() {
	rm -rf src/llvm

	mkdir -p stage0
	cp -flr ../rustc-*/rustc/* stage0
	cp -flr ../rust-std-*/rust-std-*/* stage0
	case "$XBPS_MACHINE" in
		*-musl) cp -flr ../cargo stage0/bin;;
		*) cp -flr ../cargo-*/cargo/* stage0;;
	esac

	# XXX: Cheat Rust build system so we can build rustc using different
	# version of (prebuilt) stable rustc than preconfigured. It's hack-ish,
	# but since we're basically rebuilding rustc with the same version,
	# it's actually safe.
	# Note: --enable-local-rebuild from #33787 didn't work, don't know why.
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	rustc_ver="$($wrksrc/stage0/bin/rustc --version | cut -f2 -d ' ')"
	rustc_key="$(printf "$rustc_ver" | md5sum | cut -c1-8)"
	sed -Ei \
		-e "s/^(rustc):.*/\1: $rustc_ver-1970-01-01/" \
		-e "s/^(rustc_key):.*/\1: $rustc_key/" \
		src/stage0.txt

	# Generate config for bootstrap.py to use our prebuilt rustc and cargo
	# for bootstrapping instead of downloading snapshot from internet.
	cat > config.toml <<EOF
[build]
cargo = "$wrksrc/stage0/bin/cargo"
rustc = "$wrksrc/stage0/bin/rustc"
EOF

	sed -i /LD_LIBRARY_PATH/d src/bootstrap/bootstrap.py
}

pre_build() {
	export CARGO_HOME="$wrksrc/.cargo"
	export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	export PATH="$wrksrc/stage0/bin:$PATH"
	export MUSL_ROOT=/usr
	export RUST_BACKTRACE=1
}

do_configure() {
	local _triplet
	case $XBPS_TARGET_MACHINE in
		i686) _triplet=i686-unknown-linux-gnu;;
		x86_64) _triplet=x86_64-unknown-linux-gnu;;
		x86_64-musl) _triplet=x86_64-unknown-linux-musl;;
		*) _triplet=$XBPS_TARGET_MACHINE;;
	esac
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	configure_args="
		--prefix=/usr
		--host=${_triplet}
		--build=${_triplet}
		--release-channel=stable
		--disable-rpath
		--disable-docs
		--disable-codegen-tests
		--enable-ccache
		--llvm-root=/usr
		--enable-local-rust
		--local-rust-root=$wrksrc/stage0
	"
	case "$XBPS_TARGET_MACHINE" in
	*-musl)
		configure_args+="--musl-root=/usr --disable-jemalloc"
		;;
	esac
	./configure $configure_args

}
do_install() {
	vmkdir usr
	tar xf build/dist/rustc-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude=manifest.in
	tar xf build/dist/rust-std-*-*-*.tar.gz -C "$DESTDIR/usr/lib" --strip-components=3 --exclude=manifest.in

	vlicense COPYRIGHT
	vlicense LICENSE-APACHE
	vlicense LICENSE-MIT

	cd ${DESTDIR}/usr/lib
	ln -sf rustlib/*/lib/*.so .   # symlinks instead of copies
}

rust-doc_package() {
	short_desc+=" - documentation"
	noarch=yes
	pkg_install() {
		vmove usr/share/doc
	}
}
